jshero.koans.add({id:"elseif",title:"else if",lesson:"M\xF6chte man mehrere F\xE4lle unterscheiden, kann man ein <code>if</code> mit beliebig vielen <code>else if</code>\nerg\xE4nzen. Zum Schluss kann bei Bedarf noch ein einzelnes <code>else</code> stehen.\n\n<pre><code>let mitteilung;\nif (betrag > 1000) {\n  mitteilung = 'Zu gro\xDF. Keine Auszahlung m\xF6glich!';\n} else if (betrag < 10) {\n  mitteilung = 'Zu klein. Keine Auszahlung m\xF6glich!';\n} else {\n  mitteilung = 'Der Betrag wird ausgezahlt!';\n}</code></pre>\n\nZuerst wird gepr\xFCft, ob <code>betrag</code> gr\xF6\xDFer <code>1000</code> ist. Ist das der Fall, wird die 'Zu gro\xDF...'-Mitteilung\ngesetzt und der Code am Ende des gesamten Blocks fortgesetzt. Ist das nicht der Fall, wird die <code>else if</code>-Bedingung\ngepr\xFCft. Ist diese erf\xFCllt, wird die 'Zu klein...'-Mitteilung gesetzt und der Code am Ende des gesamten Blocks fortgesetzt.\nErst wenn keine Bedingung erf\xFCllt ist, wird der abschlie\xDFenden <code>else</code>-Block ausgef\xFChrt.",task:"Schreibe eine Funktion <code>addiereMitZuschlag</code>, die zwei Betr\xE4ge mit Zuschlag addiert.\nF\xFCr jeden Betrag, der kleiner gleich <code>10</code> ist, betr\xE4gt der Zuschlag <code>1</code>. F\xFCr jeden\nBetrag, der gr\xF6\xDFer <code>10</code> und kleiner gleich <code>20</code> ist, betr\xE4gt der Zuschlag <code>2</code>.\nF\xFCr jeden Betrag, der gr\xF6\xDFer <code>20</code> ist, betr\xE4gt der Zuschlag <code>3</code>.<br><br>Beispiel:\n<code>addiereMitZuschlag(10, 30)</code> sollte <code>44</code> ergeben.",tests:[function(){return jshero.testutil.assert_isFunction("addiereMitZuschlag")},function(){return jshero.testutil.assert_functionHasNumOfParameter("addiereMitZuschlag",2)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(1, 1)",4)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(10, 10)",22)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(11, 10)",24)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(10, 11)",24)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(11, 11)",26)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(10, 20)",33)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(20, 10)",33)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(10, 21)",35)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(21, 10)",35)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(11, 20)",35)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(20, 11)",35)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(11, 21)",37)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(21, 11)",37)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(20, 20)",44)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(21, 20)",46)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(20, 21)",46)},function(){return jshero.testutil.assert_functionReturns("addiereMitZuschlag(21, 21)",48)}]});